import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";
import { authTables } from "@convex-dev/auth/server";

export default defineSchema({
  ...authTables,
  accounts: defineTable({
    access_token: v.union(v.null(), v.string()),
    access_token_expires_at: v.union(v.null(), v.string()),
    account_id: v.string(),
    created_at: v.string(),
    id: v.string(),
    id_token: v.union(v.null(), v.string()),
    password: v.union(v.null(), v.string()),
    provider_id: v.string(),
    refresh_token: v.null(),
    refresh_token_expires_at: v.null(),
    scope: v.union(v.null(), v.string()),
    updated_at: v.string(),
    user_id: v.string(),
  }),
  assistant_files: defineTable({
    assistant_id: v.string(),
    content: v.string(),
    created_at: v.string(),
    file_type: v.string(),
    filename: v.string(),
    id: v.string(),
    updated_at: v.string(),
  }),
  assistants: defineTable({
    created_at: v.string(),
    created_by: v.string(),
    description: v.string(),
    id: v.string(),
    instructions: v.string(),
    knowledge: v.string(),
    name: v.string(),
    organization_id: v.null(),
    updated_at: v.string(),
  }),
  invitations: defineTable({
    created_at: v.string(),
    email: v.string(),
    expires_at: v.string(),
    id: v.string(),
    inviter_id: v.string(),
    organization_id: v.string(),
    role: v.string(),
    status: v.string(),
    updated_at: v.string(),
  }),
  members: defineTable({
    created_at: v.string(),
    id: v.string(),
    organization_id: v.string(),
    role: v.string(),
    updated_at: v.string(),
    user_id: v.string(),
  }),
  organizations: defineTable({
    created_at: v.string(),
    id: v.string(),
    logo: v.null(),
    metadata: v.null(),
    name: v.string(),
    slug: v.string(),
    updated_at: v.string(),
  }),
  plan_template_items: defineTable({
    created_at: v.string(),
    created_by: v.string(),
    description: v.string(),
    id: v.string(),
    instructions: v.string(),
    organization_id: v.null(),
    system_prompt: v.string(),
    title: v.string(),
    type: v.string(),
    updated_at: v.string(),
    user_prompt: v.string(),
  }),
  plan_template_steps: defineTable({
    created_at: v.string(),
    created_by: v.string(),
    description: v.string(),
    id: v.string(),
    organization_id: v.null(),
    plan_template_id: v.string(),
    title: v.string(),
    updated_at: v.string(),
  }),
  plan_template_steps_items: defineTable({
    created_at: v.string(),
    id: v.string(),
    order: v.float64(),
    plan_item_id: v.string(),
    plan_step_id: v.string(),
    updated_at: v.string(),
  }),
  plan_templates: defineTable({
    created_at: v.string(),
    created_by: v.string(),
    description: v.string(),
    id: v.string(),
    organization_id: v.null(),
    title: v.string(),
    updated_at: v.string(),
  }),
  subscriptions: defineTable({
    cancel_at_period_end: v.null(),
    created_at: v.string(),
    id: v.string(),
    period_end: v.string(),
    period_start: v.string(),
    plan: v.string(),
    reference_id: v.string(),
    seats: v.float64(),
    status: v.string(),
    stripe_customer_id: v.string(),
    stripe_subscription_id: v.string(),
    trial_end: v.null(),
    trial_start: v.null(),
    updated_at: v.string(),
  }),
  team_members: defineTable({
    created_at: v.string(),
    id: v.string(),
    member_id: v.string(),
    team_id: v.string(),
    updated_at: v.string(),
  }),
  teams: defineTable({
    created_at: v.string(),
    id: v.string(),
    name: v.string(),
    organization_id: v.string(),
    updated_at: v.string(),
  }),
  users: defineTable({
    ban_expires: v.null(),
    ban_reason: v.null(),
    banned: v.boolean(),
    created_at: v.string(),
    email: v.string(),
    email_verified: v.boolean(),
    id: v.string(),
    image: v.union(v.null(), v.string()),
    is_anonymous: v.boolean(),
    name: v.string(),
    role: v.string(),
    stripe_customer_id: v.string(),
    updated_at: v.string(),
  }),
});